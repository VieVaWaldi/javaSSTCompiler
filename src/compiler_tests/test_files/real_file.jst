// Parser, ST, AST Test

class RealClass {
	final int var1 = 0;
	final int var2 = 2;
	final int var3 = 127 - 0;
	final int var4 = 3;
	final int var5 = 100 ;

	/* QUESTION --> Not part of the language */
	// ERR final int negative = -100;

	/* ERR SAME VARIABLE NAME */
	// ERR final int var5 = 102;

	/* ERR Same name as method */
	// ERR final int meth2 = 90;

	int dyn1;
	int dyn2;
	int dyn3;

	/* ERROR SAME METHOD */
    // ERR public void meth1(int m) {
    // ERR   int a;
    // ERR   a=4;
    // ERR }

    public int meth1() {
        dyn1 = 3;
        // FT: return nothing for void
        return; // return nothing equals return void
    }

    /* FT Overload, only dependent on var count AND return type */
    public void meth1(int m) {
        dyn2 = 3;
    }

    /* FT Overload */
    public int meth1(int m) {
       // FT only find method with return type int
       return meth1(m);
    }
	
	public void meth1() {
		int m1;
		int m2;
		int m3;
		int langerVariablenName;

        langerVariablenName = 41321234;
		m1 = 10 + 13 - 22 / 45;
		m2 = 20 + m2;
		m3 = 0 + 5*m2;

		while(m1 < m2) {
		    /* ERR VAR GIBT ES */
		    // ERR a = 3
			m1 = m1 + 1;
			if (m1 == 15) {
				m3 = m3 + 1;
			} else {
				m3 = m3 - 1;
				/* ERR VAR GIBT ES NICHT TIEF */
				// ERR m3 = undefinedVar;
			}
			
			if (m3 >= 5) {
				return;
			} else {
				m2 = m2 - 1;
			}
		}

		// FT Expressions as Paras
		meth2(m1, m3+1/7);

		// FT METHOD CALL WITH METHOD AS PARA
		m2 = meth2(m2, meth2(m1,m3));
		m2 = meth2(meth2(m1,m3), m2);
		m2 = meth2(meth2(meth2(m1,m2),m3), meth2(meth2(m1,m2),m2));

        /* ERR METHOD DOESNT EXIST */
        // ERR m3 = meth3();
        // ERR meth3();
        // ERR meth2(m1, m3+1/7, m3);

		/* ERR WRONG PARA COUNT */
		// ERR m3 = meth2(m1,meth1(), meth1(m1));
		// ERR m2 = meth2(meth2(meth2(m1,m2),m3), meth2(meth2(m1,m2),m2), m3);
        // ERR m3 = meth2(m1+m3);
        m3 = meth2(m1, m2);
		
		return;
	}

	/* INDEPENDENT METHOD PLACEMENT */
    public int meth2(int m, int n) {
        return m * n + (m/n);
    }

	public int obfuscatedMethodName(int para,int para2,int para3,int para4, int para5) {
	    int fuckAround;
	    while (para==0){
	        if (para>0){
	            para=para-1;
	            if (para2 == 1) {
                    if (para3 == 1) {
                        if (para4 == 1) {
                            return para5;
                        }
                        else {
                            /* ERR VAR GIBT ES NICHT TIEF */
                            //ERR para4 = undefinedVar;
                            return para4;
                        }
                    }
                    else {
                        while( para >= 1) {
                            para5=para*4/123*1+3+333333/12+12+para4+para3*para5;
                            para=para-1;
                        }
                    }
	            }
	            else {
	                /* FT METHOD INDEPENDENT and METHOD OVERLOAD  */
                    return obfuscatedMethodName(para2, para3, para4, para5);
                }
	        }
	        else {
	            para = para+1+var1+var2+var3+var4+var5;
	        }
	    }
	    return para;
	}

    /* FT OVERLOAD LONG */
	public int obfuscatedMethodName(int para2,int para3,int para4, int para5) {
	    return para2;
	}
}
