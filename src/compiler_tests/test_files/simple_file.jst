// Type checks test

class Test {
	final int var1 = 0;
	final int var2 = 2;
	final int var3 = 127 - 10;
	final int var4 = 3;
	final int var5 = 100;

	int dyn1;
	int dyn2;
	int dyn3;

	int unInitClassVar;

	public void meth1(int a) {
	    a = 1;
	    // FT void methods cant have a return
	    // ERR return a;
	}

	public int meth1(int b) {
	    // FT Cant use uninitialized Method_var or Class_var
        // ERR return unInitClassVar;
        // ToDo 2 returns
        // ERR 2 returns
        return b;
        return b;
	}

	public void meth1() {
		int m1;
		int m2;
		int m3;

		int unInitMethodVar;

		m1 = var1;

        // FT Cant use uninitialized Method_var or Class_var
        // ERR m1 = unInitMethodVar;
        // ERR m1 = unInitClassVar;
        // ERR m1 = unInitMethodVar + 1;
        // ERR m1 = unInitClassVar - 10;
        // ERR m1 = 1 + unInitMethodVar;
        // ERR m1 = 10 * unInitMethodVar;
        // ERR m1 = unInitClassVar / 2;
        // ERR meth1(unInitMethodVar);
        // if (unInitMethodVar >= 1)
        // {
        //     m1 = 10;
        // }
        // else
        // {
        //     m1 = 20;
        // }

		// FT, Cant assign constant
		// ERR var4 = 3;

		// FT Assignment chooses int meth1(a), not void meth1(b)
		m3 = meth1(m1);

		// FT there is no meth1() with return int
		// ERR m3 = meth1();

        // FT Type must be int
		// ERR m2 = 1 == 3;
		// ERR m2 = m2 + meth1() + m3;
		// ERR m2 = m2 * m3 == 3;

		// FT condition only with bool ops
		// ERR while (1==) {
		// ERR while (1+1) {
		    // ERR m2 = m2+1;
		    // FT COMP only takes int AND there is no int meth1()
            // ERR if (meth1() == 3){
            // ERR     m1 = 3;
            // ERR }
            // ERR else{
            // ERR     m1 = 4;
            // ERR }
        // ERR }

		while(m1 < 190) {
			m1 = m1 + 1;
			if (m1 == 15) {
				m3 = m3 + 1;
			} else {
				m3 = m3 - 1;
			}

			if (m3 >= 5) {
				return;
			} else {
				m2 = m2 - 1;
				// FT, Cant assign constant deep
                // ERR var1 = 3;
			}
		}

        meth2(10, m1);

        meth2(1+2+3, m3/10+5);

        // FT because there is no int meth1()
		// ERR m3 = meth2(m1,meth1());

		// FT meth1() only takes int
		// ERR m3 = meth1(1==3);

		m2 = meth2(meth2(m1,m3), m2);
	}

	public int meth2(int m, int n) {
	    // FT AST precedence over (2+3)
		return 1 * (2 + 3) /4;
	}
}
